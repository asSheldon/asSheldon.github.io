(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{469:function(t,a,r){"use strict";r.r(a);var s=r(4),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("div",{staticClass:"custom-block tip"},[r("p",[t._v("HTTP2及HTTP缓存")])]),t._v(" "),r("h2",{attrs:{id:"http缓存"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#http缓存"}},[t._v("#")]),t._v(" HTTP缓存")]),t._v(" "),r("hr"),t._v(" "),r("h3",{attrs:{id:"缓存的种类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#缓存的种类"}},[t._v("#")]),t._v(" 缓存的种类")]),t._v(" "),r("hr"),t._v(" "),r("p",[r("img",{attrs:{src:"/HTTP.jpg",alt:"avatar"}})]),t._v(" "),r("h3",{attrs:{id:"什么是http缓存？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是http缓存？"}},[t._v("#")]),t._v(" 什么是HTTP缓存？")]),t._v(" "),r("hr"),t._v(" "),r("p",[t._v("http缓存指的是: 当客户端向服务器请求资源时，会先抵达浏览器缓存，如果浏览器有“要请求资源”的副本，就可以直接从浏览器缓存中提取而不是从原始服务器中提取这个资源。"),r("br"),t._v("\n常见的http缓存只能缓存get请求响应的资源，对于其他类型的响应则无能为力，所以后续说的请求缓存都是指GET请求。"),r("br"),t._v("\nhttp缓存都是从第二次请求开始的。第一次请求资源时，服务器返回资源，并在respone header头中回传资源的缓存参数；第二次请求时，浏览器判断这些请求参数，命中强缓存就直接200，否则就把请求参数加到request header头中传给服务器，看是否命中协商缓存，命中则返回304，否则服务器会返回新的资源。")]),t._v(" "),r("h3",{attrs:{id:"http缓存分类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#http缓存分类"}},[t._v("#")]),t._v(" HTTP缓存分类")]),t._v(" "),r("hr"),t._v(" "),r("p",[r("img",{attrs:{src:"/HTTP1.jpg",alt:"avatar"}})]),t._v(" "),r("h3",{attrs:{id:"协商缓存"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[t._v("#")]),t._v(" 协商缓存")]),t._v(" "),r("hr"),t._v(" "),r("p",[t._v("当第一次请求时服务器返回的响应头中没有Cache-Control和Expires或者Cache-Control和Expires过期还或者它的属性设置为no-cache时(即不走强缓存)，那么浏览器第二次请求时就会与服务器进行协商，与服务器端对比判断资源是否进行了修改更新。如果服务器端的资源没有修改，那么就会返回304状态码，告诉浏览器可以使用缓存中的数据，这样就减少了服务器的数据传输压力。\n如果数据有更新就会返回200状态码，服务器就会返回更新后的资源并且将缓存信息一起返回。跟协商缓存相关的header头属性有（ETag/If-Not-Match 、Last-Modified/If-Modified-Since）请求头和响应头需要成对出现"),r("br"),t._v(" "),r("img",{attrs:{src:"/HTTP2.jpg",alt:"avatar"}}),r("br"),t._v("\n协商缓存的执行流程是这样的：当浏览器第一次向服务器发送请求时，会在响应头中返回协商缓存的头属性：ETag和Last-Modified,其中ETag返回的是一个hash值，Last-Modified返回的是GMT格式的最后修改时间。然后浏览器在第二次发送请求的时候，会在请求头中带上与ETag对应的If-Not-Match，其值就是响应头中返回的ETag的值，Last-Modified对应的If-Modified-Since。服务器在接收到这两个参数后会做比较，如果返回的是304状态码，则说明请求的资源没有修改，浏览器可以直接在缓存中取数据，否则，服务器会直接返回数据。")]),t._v(" "),r("h3",{attrs:{id:"使用http缓存的优点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用http缓存的优点"}},[t._v("#")]),t._v(" 使用HTTP缓存的优点")]),t._v(" "),r("hr"),t._v(" "),r("ol",[r("li",[t._v("减少了冗余的数据传输，节省了网费。")]),t._v(" "),r("li",[t._v("缓解了服务器的压力， 大大提高了网站的性能")]),t._v(" "),r("li",[t._v("加快了客户端加载网页的速度")])]),t._v(" "),r("h3",{attrs:{id:"浏览器发送请求流程图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浏览器发送请求流程图"}},[t._v("#")]),t._v(" 浏览器发送请求流程图")]),t._v(" "),r("hr"),t._v(" "),r("p",[r("img",{attrs:{src:"/HTTP3.jpg",alt:"avatar"}}),r("br"),t._v(" "),r("img",{attrs:{src:"/HTTP4.jpg",alt:"avatar"}})]),t._v(" "),r("h3",{attrs:{id:"浏览器缓存"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存"}},[t._v("#")]),t._v(" 浏览器缓存")]),t._v(" "),r("hr"),t._v(" "),r("p",[t._v("浏览器缓存主要分为三种，分别是cookie、sessionStorage、localStorage"),r("br"),t._v(" "),r("img",{attrs:{src:"/HTTP5.jpg",alt:"avatar"}})])])}),[],!1,null,null,null);a.default=e.exports}}]);